1)

Table Activities:

+-------------+---------+
| Column Name | Type    |
+-------------+---------+
| sell_date   | date    |
| product     | varchar |
+-------------+---------+
There is no primary key (column with unique values) for this table. It may contain duplicates.
Each row of this table contains the product name and the date it was sold in a market.
 

Write a solution to find for each date the number of different products sold and their names.

The sold products names for each date should be sorted lexicographically.

Return the result table ordered by sell_date.

The result format is in the following example.

 

Example 1:

Input: 
Activities table:
+------------+------------+
| sell_date  | product     |
+------------+------------+
| 2020-05-30 | Headphone  |
| 2020-06-01 | Pencil     |
| 2020-06-02 | Mask       |
| 2020-05-30 | Basketball |
| 2020-06-01 | Bible      |
| 2020-06-02 | Mask       |
| 2020-05-30 | T-Shirt    |
+------------+------------+
Output: 
+------------+----------+------------------------------+
| sell_date  | num_sold | products                     |
+------------+----------+------------------------------+
| 2020-05-30 | 3        | Basketball,Headphone,T-shirt |
| 2020-06-01 | 2        | Bible,Pencil                 |
| 2020-06-02 | 1        | Mask                         |
+------------+----------+------------------------------+
Explanation: 
For 2020-05-30, Sold items were (Headphone, Basketball, T-shirt), we sort them lexicographically and separate them by a comma.
For 2020-06-01, Sold items were (Pencil, Bible), we sort them lexicographically and separate them by a comma.
For 2020-06-02, the Sold item is (Mask), we just return it.

-------------------------------------------------------------------------------------

Solution-


WITH SortedProducts AS (
    SELECT
        sell_date,
        COUNT(DISTINCT product) AS num_sold,
        GROUP_CONCAT(DISTINCT product ORDER BY product ASC) AS products
    FROM
        Activities
    GROUP BY
        sell_date
)

SELECT
    sell_date,
    num_sold,
    products
FROM
    SortedProducts
ORDER BY
    sell_date;



--------------------------------------------------------------------------------------------
1174. Immediate Food Delivery II


Select 
    round(avg(order_date = customer_pref_delivery_date)*100, 2) as immediate_percentage
from Delivery
where (customer_id, order_date) in (
  Select customer_id, min(order_date) 
  from Delivery
  group by customer_id
);




WITH FirstOrders AS (
  SELECT
    customer_id,
    MIN(order_date) AS first_order_date
  FROM
    Delivery
  GROUP BY
    customer_id
)

SELECT
  ROUND(
    (
      SUM(CASE WHEN DATEDIFF(customer_pref_delivery_date, first_order_date) = 0 THEN 1 ELSE 0 END)
      /
      COUNT(FirstOrders.customer_id)
    ) * 100,
    2
  ) AS immediate_percentage
FROM
  FirstOrders;
-------------------------------------------------------------------------------------------

